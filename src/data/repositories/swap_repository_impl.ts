import { ethers } from 'ethers';
import { TokenInfo, SwapQuote, SwapRequest, SwapResult, SwapTransaction } from '../../domain/entities/swap_entity';
import { SwapRepository } from '../../domain/repositories/swap_repository';
import { OneInchApiService } from '../services/oneinch_api_service';
import { MoralisApiService } from '../services/moralis_api_service';
import { POPULAR_TOKENS } from '../../core/config/token_list';
import { tokenListCacheService } from '../services/token_list_cache_service';

// ERC-20 ABI cho c√°c function c·∫ßn thi·∫øt
const ERC20_ABI = [
  'function balanceOf(address owner) view returns (uint256)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function decimals() view returns (uint8)',
  'function symbol() view returns (string)',
  'function name() view returns (string)',
];

export class SwapRepositoryImpl implements SwapRepository {
  private provider: ethers.JsonRpcProvider | null = null;
  
  constructor(
    private oneInchService: OneInchApiService,
    private moralisApiService: MoralisApiService,
    private rpcUrl: string = 'https://bsc-dataseed.binance.org/' // BSC RPC
  ) {
    // Lazy initialization of RPC provider
  }

  private async getProvider(): Promise<ethers.JsonRpcProvider> {
    if (!this.provider) {
      try {
        this.provider = new ethers.JsonRpcProvider(this.rpcUrl);
        // Test the connection
        await this.provider.getNetwork();
      } catch (error) {
        console.warn('Primary RPC failed, trying fallback:', error);
        try {
          this.provider = new ethers.JsonRpcProvider('https://rpc.ankr.com/eth');
          await this.provider.getNetwork();
        } catch (fallbackError) {
          console.warn('Fallback RPC also failed:', fallbackError);
          // Create a dummy provider that won't cause crashes
          this.provider = new ethers.JsonRpcProvider('https://eth.llamarpc.com');
        }
      }
    }
    return this.provider;
  }

  private async processTokensInBatches<T>(
    tokens: any[], 
    batchSize: number, 
    processor: (token: any) => Promise<T>
  ): Promise<T[]> {
    const results: T[] = [];
    
    for (let i = 0; i < tokens.length; i += batchSize) {
      const batch = tokens.slice(i, i + batchSize);
      const batchResults = await Promise.allSettled(
        batch.map(processor)
      );
      
      batchResults.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          results.push(result.value);
        } else {
          console.error(`Error processing token ${batch[index].symbol}:`, result.reason);
          // Add fallback data for failed tokens
          results.push({
            ...batch[index],
            priceUSD: 0,
            priceChange24h: 0,
          } as T);
        }
      });
      
      // Add delay between batches to avoid rate limiting
      if (i + batchSize < tokens.length) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    return results;
  }

  async getSupportedTokens(): Promise<TokenInfo[]> {
    try {
      // Check cache first
      const cachedTokens = tokenListCacheService.getCachedTokenList();
      if (cachedTokens) {
        console.log(`Using cached supported tokens list (${cachedTokens.length} tokens)`);
        return cachedTokens;
      }

      console.log('S·ª≠ d·ª•ng danh s√°ch token tƒ©nh (kh√¥ng g·ªçi 1inch API)...');
      
      // S·ª≠ d·ª•ng tr·ª±c ti·∫øp danh s√°ch token ph·ªï bi·∫øn t·ª´ token_list.ts
      console.log(`S·ª≠ d·ª•ng ${POPULAR_TOKENS.length} token ph·ªï bi·∫øn t·ª´ danh s√°ch tƒ©nh`);
      
      // D√πng danh s√°ch tƒ©nh, kh√¥ng g·ªçi API
      const topExpensiveTokens = POPULAR_TOKENS;
      
      console.log(`Found ${topExpensiveTokens.length} top expensive tokens from static list`);
      
      try {
        // ‚ö° OPTIMIZATION: Kh√¥ng fetch gi√° t·∫•t c·∫£ tokens khi load ƒë·ªÉ ti·∫øt ki·ªám CU
        // Ch·ªâ fetch gi√° khi user th·ª±c s·ª± c·∫ßn (khi ch·ªçn token ƒë·ªÉ swap)
        console.log('‚ö° OPTIMIZED: Kh√¥ng fetch gi√° t·∫•t c·∫£ tokens ngay l·∫≠p t·ª©c ƒë·ªÉ ti·∫øt ki·ªám Moralis CU');
        console.log('üí° Gi√° s·∫Ω ƒë∆∞·ª£c fetch khi user ch·ªçn token c·ª• th·ªÉ ƒë·ªÉ swap');
        
        // T·∫°o empty price map - gi√° s·∫Ω ƒë∆∞·ª£c fetch on-demand
        const moralisPrices: {[key: string]: number} = {};
        
        // T·∫°o tokens v·ªõi gi√° m·∫∑c ƒë·ªãnh 0 - gi√° s·∫Ω ƒë∆∞·ª£c fetch on-demand khi c·∫ßn
        const tokensWithoutPrices = topExpensiveTokens.map(token => {
          return {
            ...token,
            priceUSD: 0, // Gi√° s·∫Ω ƒë∆∞·ª£c fetch khi user ch·ªçn token
            priceChange24h: 0,
          };
        });
        
        console.log('‚úÖ T·∫°o th√†nh c√¥ng', tokensWithoutPrices.length, 'tokens kh√¥ng fetch gi√° (ti·∫øt ki·ªám CU)');
        
        // Gi·ªØ th·ª© t·ª± t·ª´ POPULAR_TOKENS (kh√¥ng c·∫ßn sort theo gi√° v√¨ gi√° = 0)
        const finalTokens = tokensWithoutPrices;
        
        console.log('‚úÖ Tokens ƒë∆∞·ª£c t·∫°o v·ªõi gi√° m·∫∑c ƒë·ªãnh 0 (s·∫Ω fetch on-demand):');
        finalTokens.slice(0, 5).forEach((token: any, index: any) => {
          console.log(`${index + 1}. ${token.symbol} - Gi√° s·∫Ω ƒë∆∞·ª£c fetch khi c·∫ßn`);
        });
        
        // Cache the result before returning
        tokenListCacheService.setCachedTokenList(finalTokens);
        console.log(`‚úÖ Cached ${finalTokens.length} tokens WITHOUT prices (CU optimized)`);
        
        return finalTokens;
        
      } catch (priceError) {
        console.warn('Failed to fetch prices from Moralis, using fallback:', priceError);
        
        // Fallback to static prices if Moralis API fails
        const fallbackPrices: Record<string, { price: number; change: number }> = {
          '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee': { price: 3400, change: 2.5 }, // ETH
          '0x55d398326f99059fF775485246999027B3197955': { price: 1.0, change: 0.1 }, // USDT BSC
          '0xa0b86a33e6ba8d2f7928d16768debd89c78b322f': { price: 1.0, change: -0.05 }, // USDC
          '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': { price: 3400, change: 2.5 }, // WETH
          '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce': { price: 0.000025, change: -1.8 }, // SHIB
          '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599': { price: 65000, change: 1.2 }, // WBTC
          '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984': { price: 12.5, change: -0.8 }, // UNI
          '0x514910771af9ca656af840dff83e8264ecf986ca': { price: 18.2, change: 3.1 }, // LINK
        };
        
        const tokensWithFallbackPrices = topExpensiveTokens.map(token => {
          const fallbackPrice = fallbackPrices[token.address.toLowerCase()];
          return {
            ...token,
            priceUSD: fallbackPrice?.price || 0,
            priceChange24h: fallbackPrice?.change || 0,
          };
        });
        
        // S·∫Øp x·∫øp fallback tokens theo gi√°
        const sortedFallbackTokens = tokensWithFallbackPrices.sort((a: any, b: any) => b.priceUSD - a.priceUSD);
        
        console.log('Using fallback prices - Top 5 expensive coins:');
        sortedFallbackTokens.slice(0, 5).forEach((token: any, index: any) => {
          console.log(`${index + 1}. ${token.symbol} - $${token.priceUSD.toFixed(2)}`);
        });
        
        // Cache the fallback result
        tokenListCacheService.setCachedTokenList(sortedFallbackTokens);
        console.log(`Cached ${sortedFallbackTokens.length} tokens with fallback prices`);
        
        return sortedFallbackTokens;
      }
    } catch (error) {
      console.error('Error getting supported tokens:', error);
      
      // Fallback: tr·∫£ v·ªÅ danh s√°ch token c∆° b·∫£n khi 1inch API fail
      return [
        { 
          address: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee', 
          symbol: 'ETH', 
          name: 'Ethereum', 
          decimals: 18, 
          priceUSD: 3400, 
          priceChange24h: 2.5,
          logoURI: 'https://tokens.1inch.io/0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.png'
        },
        { 
          address: '0xdac17f958d2ee523a2206206994597c13d831ec7', 
          symbol: 'USDT', 
          name: 'Tether USD', 
          decimals: 6, 
          priceUSD: 1.0, 
          priceChange24h: 0.1,
          logoURI: 'https://tokens.1inch.io/0xdac17f958d2ee523a2206206994597c13d831ec7.png'
        },
        { 
          address: '0xa0b86a33e6ba8d2f7928d16768debd89c78b322f', 
          symbol: 'USDC', 
          name: 'USD Coin', 
          decimals: 6, 
          priceUSD: 1.0, 
          priceChange24h: -0.05,
          logoURI: 'https://tokens.1inch.io/0xa0b86a33e6ba8d2f7928d16768debd89c78b322f.png'
        },
        { 
          address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', 
          symbol: 'WETH', 
          name: 'Wrapped Ether', 
          decimals: 18, 
          priceUSD: 3400, 
          priceChange24h: 2.5,
          logoURI: 'https://tokens.1inch.io/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.png'
        },
        { 
          address: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce', 
          symbol: 'SHIB', 
          name: 'Shiba Inu', 
          decimals: 18, 
          priceUSD: 0.000025, 
          priceChange24h: -1.8,
          logoURI: 'https://tokens.1inch.io/0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce.png'
        },
      ];
    }
  }

  async getTokenInfo(tokenAddress: string): Promise<TokenInfo> {
    try {
      const provider = await this.getProvider();
      const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
      
      const [symbol, name, decimals] = await Promise.all([
        contract.symbol(),
        contract.name(),
        contract.decimals(),
      ]);

      // S·ª≠ d·ª•ng Moralis thay v√¨ CoinGecko ƒë·ªÉ l·∫•y gi√° token
      const prices = await this.moralisApiService.getTokenPrices([tokenAddress]);
      const price = prices[tokenAddress] || 0;

      return {
        address: tokenAddress,
        symbol,
        name,
        decimals,
        priceUSD: price,
        priceChange24h: 0, // Moralis kh√¥ng cung c·∫•p thay ƒë·ªïi gi√° 24h
      };
    } catch (error) {
      console.error('Error getting token info:', error);
      throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin token');
    }
  }

  async getTokenBalance(tokenAddress: string, walletAddress: string): Promise<string> {
    try {
      const provider = await this.getProvider();
      
      // X·ª≠ l√Ω ETH (native token)
      if (tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {
        const balance = await provider.getBalance(walletAddress);
        return ethers.formatEther(balance);
      }

      // X·ª≠ l√Ω ERC-20 tokens
      const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
      const balance = await contract.balanceOf(walletAddress);
      const decimals = await contract.decimals();
      
      return ethers.formatUnits(balance, decimals);
    } catch (error) {
      console.error('Error getting token balance:', error);
      return '0';
    }
  }

  async getTokenPrice(tokenAddress: string): Promise<{ price: number; priceChange24h: number }> {
    // S·ª≠ d·ª•ng Moralis thay v√¨ CoinGecko ƒë·ªÉ l·∫•y gi√° token
    const prices = await this.moralisApiService.getTokenPrices([tokenAddress]);
    return {
      price: prices[tokenAddress] || 0,
      priceChange24h: 0 // Moralis kh√¥ng cung c·∫•p th√¥ng tin thay ƒë·ªïi gi√° 24h
    };
  }

  async getSwapQuote(request: SwapRequest): Promise<SwapQuote> {
    try {
      return await this.oneInchService.getSwapQuote(request);
    } catch (error) {
      console.warn('1inch API failed, using fallback quote calculation:', error);
      // Fallback calculation for demo
      return this.calculateFallbackQuote(request);
    }
  }

  private calculateFallbackQuote(request: SwapRequest): SwapQuote {
    // Simple fallback calculation for demo purposes
    const fromAmount = parseFloat(request.fromAmount);
    const fromPrice = request.fromToken.priceUSD || 1;
    const toPrice = request.toToken.priceUSD || 1;
    
    // Calculate estimated output with 0.3% slippage
    const usdValue = fromAmount * fromPrice;
    const estimatedToAmount = (usdValue / toPrice) * 0.997; // 0.3% slippage
    
    return {
      fromToken: request.fromToken,
      toToken: request.toToken,
      fromAmount: request.fromAmount,
      toAmount: estimatedToAmount.toString(),
      estimatedGas: '150000',
      gasPrice: '20000000000', // 20 gwei
      protocols: [{ name: 'Demo', part: 100 }],
      estimatedSlippage: 0.3,
      estimatedTime: 30,
    };
  }

  async buildSwapTransaction(request: SwapRequest): Promise<SwapTransaction> {
    return await this.oneInchService.buildSwapTransaction(request);
  }

  async executeSwap(transaction: SwapTransaction, privateKey: string): Promise<SwapResult> {
    try {
      const provider = await this.getProvider();
      const wallet = new ethers.Wallet(privateKey, provider);
      
      const tx = {
        to: transaction.to,
        data: transaction.data,
        value: transaction.value,
        gasLimit: transaction.gas,
        gasPrice: transaction.gasPrice,
      };

      const sentTx = await wallet.sendTransaction(tx);
      
      return {
        transactionHash: sentTx.hash,
        fromAmount: '0', // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ transaction receipt
        toAmount: '0',
        gasUsed: transaction.gas,
        gasPrice: transaction.gasPrice,
        status: 'pending',
        timestamp: new Date(),
      };
    } catch (error) {
      console.error('Error executing swap:', error);
      throw new Error('Kh√¥ng th·ªÉ th·ª±c hi·ªán giao d·ªãch swap');
    }
  }

  async checkAllowance(tokenAddress: string, ownerAddress: string, spenderAddress: string): Promise<string> {
    try {
      // ETH kh√¥ng c·∫ßn allowance
      if (tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {
        return ethers.MaxUint256.toString();
      }
      
      // C·∫£i thi·ªán RPC handling cho c√°c token hay g·∫∑p v·∫•n ƒë·ªÅ
      const problematicTokens = [
        '0xdac17f958d2ee523a2206206994597c13d831ec7', // USDT - th∆∞·ªùng g·∫∑p l·ªói RPC
      ];
      
      const isProblematicToken = problematicTokens.includes(tokenAddress.toLowerCase());
      if (isProblematicToken) {
        console.log(`Using enhanced RPC handling for problematic token ${tokenAddress}`);
      }

      // Retry mechanism v·ªõi multiple attempts
      let lastError: any;
      const maxRetries = 3;
      
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          console.log(`Checking allowance attempt ${attempt}/${maxRetries} for token ${tokenAddress}`);
          
          const provider = await this.getProvider();
          const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
          
          // Th·ª≠ g·ªçi allowance v·ªõi timeout
          const allowancePromise = contract.allowance(ownerAddress, spenderAddress);
          const decimalsPromise = contract.decimals();
          
          // Set timeout 10 gi√¢y cho m·ªói call
          const timeout = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('RPC call timeout')), 10000)
          );
          
          const [allowance, decimals] = await Promise.race([
            Promise.all([allowancePromise, decimalsPromise]),
            timeout
          ]) as [any, any];
          
          const result = ethers.formatUnits(allowance, decimals);
          console.log(`Allowance check successful: ${result}`);
          return result;
          
        } catch (error) {
          lastError = error;
          console.warn(`Allowance check attempt ${attempt} failed:`, (error as Error).message);
          
          if (attempt < maxRetries) {
            // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi retry
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        }
      }
      
      console.error('All allowance check attempts failed:', lastError);
      
      // Fallback: tr·∫£ v·ªÅ '0' ƒë·ªÉ app v·∫´n ho·∫°t ƒë·ªông
      console.log('Using fallback allowance value: 0');
      return '0';
      
    } catch (error) {
      console.error('Critical error in checkAllowance:', error);
      return '0';
    }
  }

  async buildApproveTransaction(
    tokenAddress: string, 
    spenderAddress: string, 
    amount: string, 
    ownerAddress: string
  ): Promise<SwapTransaction> {
    try {
      // S·ª≠ d·ª•ng 1inch approve transaction builder
      return await this.oneInchService.buildApproveTransaction(tokenAddress, amount);
    } catch (error) {
      console.error('Error building approve transaction:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o giao d·ªãch approve');
    }
  }

  async getTransactionStatus(transactionHash: string): Promise<'pending' | 'success' | 'failed'> {
    try {
      const provider = await this.getProvider();
      const receipt = await provider.getTransactionReceipt(transactionHash);
      
      if (!receipt) {
        return 'pending';
      }
      
      return receipt.status === 1 ? 'success' : 'failed';
    } catch (error) {
      console.error('Error getting transaction status:', error);
      return 'pending';
    }
  }
}
