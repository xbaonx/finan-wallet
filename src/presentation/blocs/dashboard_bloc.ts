import { DashboardEvent, LoadDashboardEvent, RefreshDashboardEvent, LoadWalletEvent, LoadTokenListEvent, LoadTotalBalanceEvent } from './dashboard_event';
import { GlobalTokenService } from '../../services/GlobalTokenService';
import { DashboardState, DashboardInitial, DashboardLoading, DashboardLoaded, DashboardRefreshing, DashboardError } from './dashboard_state';
import { GetWalletBalanceUseCase, GetCurrentWalletUseCase, RefreshWalletDataUseCase } from '../../domain/usecases/dashboard_usecases';

export class DashboardBloc {
  private _state: DashboardState = new DashboardInitial();
  private _listeners: ((state: DashboardState) => void)[] = [];
  private globalTokenService = GlobalTokenService.getInstance();

  constructor(
    private getWalletBalanceUseCase: GetWalletBalanceUseCase,
    private getCurrentWalletUseCase: GetCurrentWalletUseCase,
    private refreshWalletDataUseCase: RefreshWalletDataUseCase
  ) {
    // ƒêƒÉng k√Ω l·∫Øng nghe c·∫≠p nh·∫≠t t·ª´ GlobalTokenService
    this.globalTokenService.addListener(this._handleTokenBalanceUpdated.bind(this));
  }

  get state(): DashboardState {
    return this._state;
  }

  addListener(listener: (state: DashboardState) => void): void {
    this._listeners.push(listener);
  }

  removeListener(listener: (state: DashboardState) => void): void {
    const index = this._listeners.indexOf(listener);
    if (index > -1) {
      this._listeners.splice(index, 1);
    }
  }

  private emit(state: DashboardState): void {
    this._state = state;
    this._listeners.forEach(listener => listener(state));
  }

  async add(event: DashboardEvent): Promise<void> {
    if (event instanceof LoadDashboardEvent) {
      await this._handleLoadDashboard();
    } else if (event instanceof RefreshDashboardEvent) {
      await this._handleRefreshDashboard();
    } else if (event instanceof LoadWalletEvent) {
      await this._handleLoadWallet();
    } else if (event instanceof LoadTokenListEvent) {
      await this._handleLoadTokenList();
    } else if (event instanceof LoadTotalBalanceEvent) {
      await this._handleLoadTotalBalance();
    }
  }

  private async _handleLoadDashboard(): Promise<void> {
    try {
      this.emit(new DashboardLoading());
      
      // S·ª≠ d·ª•ng GlobalTokenService ƒë·ªÉ l·∫•y s·ªë d∆∞ token t·ª´ cache ho·∫∑c API
      console.log('üîç DashboardBloc: ƒêang t·∫£i d·ªØ li·ªáu v√≠ v√† s·ªë d∆∞ token...');
      
      // L·∫•y th√¥ng tin v√≠
      const wallet = await this.getCurrentWalletUseCase.execute();
      if (!wallet) {
        this.emit(new DashboardError('Kh√¥ng t√¨m th·∫•y v√≠'));
        return;
      }
      
      // L·∫•y s·ªë d∆∞ t·ª´ GlobalTokenService
      const walletBalance = await this.globalTokenService.getWalletBalance(false);
      
      if (!walletBalance) {
        this.emit(new DashboardError('Kh√¥ng th·ªÉ t·∫£i s·ªë d∆∞ token'));
        return;
      }
      
      this.emit(new DashboardLoaded(wallet, walletBalance));
    } catch (error) {
      this.emit(new DashboardError(`L·ªói t·∫£i dashboard: ${error}`));
    }
  }

  private async _handleRefreshDashboard(): Promise<void> {
    try {
      // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang l√†m m·ªõi
      if (this._state instanceof DashboardLoaded) {
        this.emit(new DashboardRefreshing(this._state.wallet, this._state.balance));
      } else {
        this.emit(new DashboardLoading());
      }
      
      console.log('üîÑ DashboardBloc: ƒêang l√†m m·ªõi d·ªØ li·ªáu v√≠ v√† s·ªë d∆∞ token...');
      
      // L·∫•y th√¥ng tin v√≠ m·ªõi
      const wallet = await this.getCurrentWalletUseCase.execute();
      if (!wallet) {
        this.emit(new DashboardError('Kh√¥ng t√¨m th·∫•y v√≠'));
        return;
      }
      
      // L√†m m·ªõi s·ªë d∆∞ token t·ª´ GlobalTokenService (force refresh)
      const walletBalance = await this.globalTokenService.getWalletBalance(true);
      
      if (!walletBalance) {
        this.emit(new DashboardError('Kh√¥ng th·ªÉ t·∫£i s·ªë d∆∞ token'));
        return;
      }
      
      this.emit(new DashboardLoaded(wallet, walletBalance));
    } catch (error) {
      this.emit(new DashboardError(`L·ªói l√†m m·ªõi dashboard: ${error}`));
    }
  }

  private async _handleLoadWallet(): Promise<void> {
    try {
      const wallet = await this.getCurrentWalletUseCase.execute();
      
      // If we already have balance data, keep it
      if (this._state instanceof DashboardLoaded) {
        this.emit(new DashboardLoaded(wallet, this._state.balance));
      }
    } catch (error) {
      this.emit(new DashboardError(`L·ªói t·∫£i th√¥ng tin v√≠: ${error}`));
    }
  }

  private async _handleLoadTokenList(): Promise<void> {
    try {
      // S·ª≠ d·ª•ng GlobalTokenService ƒë·ªÉ l·∫•y s·ªë d∆∞ token
      console.log('üîç DashboardBloc: ƒêang t·∫£i danh s√°ch token t·ª´ GlobalTokenService...');
      const walletBalance = await this.globalTokenService.getWalletBalance(false);
      
      if (!walletBalance) {
        console.error('‚ùå DashboardBloc: Kh√¥ng th·ªÉ t·∫£i danh s√°ch token');
        return;
      }
      
      // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu v√≠, gi·ªØ l·∫°i
      if (this._state instanceof DashboardLoaded) {
        this.emit(new DashboardLoaded(this._state.wallet, walletBalance));
      }
    } catch (error) {
      this.emit(new DashboardError(`L·ªói t·∫£i danh s√°ch token: ${error}`));
    }
  }

  private async _handleLoadTotalBalance(): Promise<void> {
    try {
      // L·∫•y s·ªë d∆∞ t·ª´ GlobalTokenService
      const walletBalance = await this.globalTokenService.getWalletBalance(false);
      
      // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu v√≠, c·∫≠p nh·∫≠t s·ªë d∆∞
      if (this._state instanceof DashboardLoaded && walletBalance) {
        this.emit(new DashboardLoaded(this._state.wallet, walletBalance));
      }
    } catch (error) {
      this.emit(new DashboardError(`L·ªói t·∫£i t·ªïng s·ªë d∆∞: ${error}`));
    }
  }

  /**
   * H√†m x·ª≠ l√Ω khi GlobalTokenService c·∫≠p nh·∫≠t d·ªØ li·ªáu s·ªë d∆∞
   * ƒê∆∞·ª£c g·ªçi t·ª± ƒë·ªông khi GlobalTokenService th√¥ng b√°o c√≥ d·ªØ li·ªáu m·ªõi
   */
  private _handleTokenBalanceUpdated(): void {
    console.log('üîî DashboardBloc: Nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o c·∫≠p nh·∫≠t s·ªë d∆∞ t·ª´ GlobalTokenService');
    
    // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu v√≠
    if (this._state instanceof DashboardLoaded) {
      this._handleLoadTotalBalance();
    }
  }

  dispose(): void {
    this._listeners.length = 0;
  }
}
