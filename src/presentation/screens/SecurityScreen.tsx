import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  Alert,
  Switch,
} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../navigation/types';
import { AuthService } from '../../data/services/auth_service';
import { GetBiometricInfoUseCase, SetupBiometricUseCase } from '../../domain/usecases/auth_usecases';

type SecurityScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Security'>;

interface Props {
  navigation: SecurityScreenNavigationProp;
}

export const SecurityScreen: React.FC<Props> = ({ navigation }) => {
  const insets = useSafeAreaInsets();
  const [biometricEnabled, setBiometricEnabled] = useState(false);
  const [biometricAvailable, setBiometricAvailable] = useState(false);
  const [biometricType, setBiometricType] = useState('Sinh tr·∫Øc h·ªçc');
  const [isLoading, setIsLoading] = useState(false);

  const authService = new AuthService();
  const getBiometricInfoUseCase = new GetBiometricInfoUseCase(authService);
  const setupBiometricUseCase = new SetupBiometricUseCase(authService);

  useEffect(() => {
    loadBiometricInfo();
  }, []);

  const loadBiometricInfo = async () => {
    try {
      const biometricInfo = await getBiometricInfoUseCase.execute();
      setBiometricAvailable(biometricInfo.isAvailable && biometricInfo.isEnrolled);
      setBiometricEnabled(biometricInfo.isEnabled);
      setBiometricType(biometricInfo.typeName);
    } catch (error) {
      console.error('Load biometric info error:', error);
    }
  };

  const handleChangePIN = () => {
    Alert.alert(
      'ƒê·ªïi m√£ PIN',
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi m√£ PIN?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        { 
          text: 'ƒê·ªïi PIN', 
          onPress: () => {
            // Navigate to change PIN flow
            navigation.navigate('ChangePin');
          }
        }
      ]
    );
  };

  const handleToggleBiometric = async (value: boolean) => {
    if (!biometricAvailable) {
      Alert.alert(
        'Kh√¥ng kh·∫£ d·ª•ng',
        'Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ sinh tr·∫Øc h·ªçc ho·∫∑c ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng thi·∫øt l·∫≠p v√¢n tay/Face ID trong C√†i ƒë·∫∑t thi·∫øt b·ªã.'
      );
      return;
    }

    setIsLoading(true);
    try {
      const result = await setupBiometricUseCase.execute(value);
      if (result.success) {
        setBiometricEnabled(value);
        Alert.alert(
          'Th√†nh c√¥ng',
          value 
            ? `${biometricType} ƒë√£ ƒë∆∞·ª£c b·∫≠t th√†nh c√¥ng`
            : `${biometricType} ƒë√£ ƒë∆∞·ª£c t·∫Øt`
        );
      } else {
        Alert.alert('L·ªói', result.error || 'Kh√¥ng th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t sinh tr·∫Øc h·ªçc');
      }
    } catch (error) {
      console.error('Toggle biometric error:', error);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi c√†i ƒë·∫∑t');
    } finally {
      setIsLoading(false);
    }
  };

  const handleKYC = () => {
    Alert.alert(
      'KYC - X√°c minh danh t√≠nh',
      'T√≠nh nƒÉng KYC s·∫Ω ƒë∆∞·ª£c ra m·∫Øt trong phi√™n b·∫£n ti·∫øp theo ƒë·ªÉ tƒÉng c∆∞·ªùng b·∫£o m·∫≠t v√† tu√¢n th·ªß quy ƒë·ªãnh.',
      [{ text: 'ƒê√£ hi·ªÉu' }]
    );
  };

  const renderSettingItem = (
    title: string, 
    subtitle: string, 
    onPress: () => void, 
    icon: string,
    rightComponent?: React.ReactNode
  ) => (
    <TouchableOpacity
      style={styles.settingItem}
      onPress={onPress}
      activeOpacity={rightComponent ? 1 : 0.8}
      disabled={!!rightComponent}
    >
      <View style={styles.settingLeft}>
        <View style={styles.settingIcon}>
          <Text style={styles.settingIconText}>{icon}</Text>
        </View>
        <View style={styles.settingInfo}>
          <Text style={styles.settingTitle}>{title}</Text>
          <Text style={styles.settingSubtitle}>{subtitle}</Text>
        </View>
      </View>
      {rightComponent || <Text style={styles.settingArrow}>‚Ä∫</Text>}
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView 
        style={styles.scrollView} 
        showsVerticalScrollIndicator={false}
        contentContainerStyle={{ paddingBottom: Math.max(insets.bottom, 20) }}
      >
        <View style={[styles.header, { paddingTop: Math.max(insets.top, 20) }]}>
          <TouchableOpacity
            style={[styles.backButton, { top: Math.max(insets.top + 20, 40) }]}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>‚Äπ Quay l·∫°i</Text>
          </TouchableOpacity>
          <Text style={styles.title}>B·∫£o m·∫≠t</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>X√°c th·ª±c</Text>
          
          {renderSettingItem(
            'ƒê·ªïi m√£ PIN',
            'Thay ƒë·ªïi m√£ PIN hi·ªán t·∫°i',
            handleChangePIN,
            'üî¢'
          )}

          {renderSettingItem(
            biometricType,
            biometricAvailable 
              ? (biometricEnabled ? 'ƒê√£ b·∫≠t' : 'ƒê√£ t·∫Øt')
              : 'Kh√¥ng kh·∫£ d·ª•ng',
            () => {},
            'üëÜ',
            <Switch
              value={biometricEnabled}
              onValueChange={handleToggleBiometric}
              disabled={!biometricAvailable || isLoading}
              trackColor={{ false: '#E5E5E5', true: '#007AFF' }}
              thumbColor={biometricEnabled ? '#FFFFFF' : '#FFFFFF'}
            />
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Tu√¢n th·ªß</Text>
          
          {renderSettingItem(
            'KYC - X√°c minh danh t√≠nh',
            'S·∫Øp ra m·∫Øt - TƒÉng c∆∞·ªùng b·∫£o m·∫≠t',
            handleKYC,
            'üÜî'
          )}
        </View>

        <View style={styles.infoSection}>
          <Text style={styles.infoText}>
            üí° M·∫πo b·∫£o m·∫≠t: Lu√¥n b·∫≠t sinh tr·∫Øc h·ªçc ƒë·ªÉ b·∫£o v·ªá v√≠ c·ªßa b·∫°n t·ªët h∆°n.
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 20,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
    position: 'relative',
  },
  backButton: {
    position: 'absolute',
    left: 20,
    top: 20,
    zIndex: 1,
  },
  backButtonText: {
    fontSize: 18,
    color: '#007AFF',
    fontWeight: '500',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1a1a1a',
    textAlign: 'center',
    marginTop: 10,
  },
  section: {
    marginTop: 30,
    paddingHorizontal: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666666',
    marginBottom: 15,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 16,
    paddingHorizontal: 16,
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  settingIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#e3f2fd',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  settingIconText: {
    fontSize: 18,
  },
  settingInfo: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 2,
  },
  settingSubtitle: {
    fontSize: 14,
    color: '#666666',
  },
  settingArrow: {
    fontSize: 20,
    color: '#cccccc',
    fontWeight: '300',
  },
  infoSection: {
    marginTop: 30,
    paddingHorizontal: 20,
  },
  infoText: {
    fontSize: 14,
    color: '#666666',
    backgroundColor: '#f8f9fa',
    padding: 16,
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
    lineHeight: 20,
  },
});
