import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  Alert,
  Image,
} from 'react-native';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../navigation/types';
import { AuthService } from '../../data/services/auth_service';
import { SetupBiometricUseCase, GetBiometricInfoUseCase } from '../../domain/usecases/auth_usecases';

type BiometricPromptScreenNavigationProp = StackNavigationProp<RootStackParamList, 'BiometricPrompt'>;

interface Props {
  navigation: BiometricPromptScreenNavigationProp;
}

export const BiometricPromptScreen: React.FC<Props> = ({ navigation }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [biometricInfo, setBiometricInfo] = useState<{
    isAvailable: boolean;
    typeName: string;
  }>({ isAvailable: false, typeName: 'Sinh tr·∫Øc h·ªçc' });

  const authService = new AuthService();
  const setupBiometricUseCase = new SetupBiometricUseCase(authService);
  const getBiometricInfoUseCase = new GetBiometricInfoUseCase(authService);

  useEffect(() => {
    checkBiometricAvailability();
  }, []);

  const checkBiometricAvailability = async () => {
    try {
      const info = await getBiometricInfoUseCase.execute();
      setBiometricInfo({
        isAvailable: info.isAvailable && info.isEnrolled,
        typeName: info.typeName,
      });
    } catch (error) {
      console.error('Check biometric availability error:', error);
    }
  };

  const handleEnableBiometric = async () => {
    setIsLoading(true);
    
    try {
      const result = await setupBiometricUseCase.execute(true);
      
      if (result.success) {
        Alert.alert(
          'Th√†nh c√¥ng',
          `${biometricInfo.typeName} ƒë√£ ƒë∆∞·ª£c b·∫≠t th√†nh c√¥ng!`,
          [{ text: 'OK', onPress: () => navigation.replace('MainTabs') }]
        );
      } else {
        Alert.alert('L·ªói', result.error || 'Kh√¥ng th·ªÉ b·∫≠t sinh tr·∫Øc h·ªçc');
      }
    } catch (error: any) {
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p sinh tr·∫Øc h·ªçc');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSkip = () => {
    Alert.alert(
      'X√°c nh·∫≠n',
      'B·∫°n c√≥ th·ªÉ b·∫≠t sinh tr·∫Øc h·ªçc sau trong C√†i ƒë·∫∑t. Ti·∫øp t·ª•c kh√¥ng b·∫≠t?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        { 
          text: 'Ti·∫øp t·ª•c', 
          onPress: () => navigation.replace('MainTabs') 
        },
      ]
    );
  };

  const getBiometricIcon = () => {
    if (biometricInfo.typeName === 'Face ID') {
      return 'üîê'; // Face ID icon
    } else if (biometricInfo.typeName === 'V√¢n tay') {
      return 'üëÜ'; // Fingerprint icon
    }
    return 'üîí'; // Generic security icon
  };

  if (!biometricInfo.isAvailable) {
    // Hi·ªÉn th·ªã th√¥ng b√°o thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ sinh tr·∫Øc h·ªçc
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.content}>
          <View style={styles.iconContainer}>
            <Text style={styles.icon}>‚ö†Ô∏è</Text>
          </View>
          
          <Text style={styles.title}>Sinh tr·∫Øc h·ªçc kh√¥ng kh·∫£ d·ª•ng</Text>
          <Text style={styles.subtitle}>
            Thi·∫øt b·ªã n√†y kh√¥ng h·ªó tr·ª£ sinh tr·∫Øc h·ªçc ho·∫∑c ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.
            B·∫°n c√≥ th·ªÉ b·∫≠t t√≠nh nƒÉng n√†y sau trong C√†i ƒë·∫∑t.
          </Text>
          
          <View style={styles.buttonContainer}>
            <TouchableOpacity 
              style={styles.primaryButton} 
              onPress={() => navigation.replace('MainTabs')}
            >
              <Text style={styles.primaryButtonText}>Ti·∫øp t·ª•c</Text>
            </TouchableOpacity>
          </View>
          
          <Text style={styles.note}>
            üí° ƒê·ªÉ s·ª≠ d·ª•ng sinh tr·∫Øc h·ªçc, h√£y thi·∫øt l·∫≠p v√¢n tay ho·∫∑c Face ID trong C√†i ƒë·∫∑t thi·∫øt b·ªã
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <View style={styles.iconContainer}>
          <Text style={styles.icon}>{getBiometricIcon()}</Text>
        </View>

        <Text style={styles.title}>
          B·∫≠t {biometricInfo.typeName}?
        </Text>
        
        <Text style={styles.subtitle}>
          B·∫°n c√≥ mu·ªën b·∫≠t x√°c th·ª±c b·∫±ng {biometricInfo.typeName} ƒë·ªÉ ƒëƒÉng nh·∫≠p nhanh h∆°n kh√¥ng?
        </Text>

        <View style={styles.benefitsList}>
          <View style={styles.benefitItem}>
            <Text style={styles.benefitIcon}>‚úÖ</Text>
            <Text style={styles.benefitText}>ƒêƒÉng nh·∫≠p nhanh v√† an to√†n</Text>
          </View>
          <View style={styles.benefitItem}>
            <Text style={styles.benefitIcon}>üîí</Text>
            <Text style={styles.benefitText}>B·∫£o m·∫≠t cao v·ªõi sinh tr·∫Øc h·ªçc</Text>
          </View>
          <View style={styles.benefitItem}>
            <Text style={styles.benefitIcon}>‚ö°</Text>
            <Text style={styles.benefitText}>Kh√¥ng c·∫ßn nh·ªõ m√£ PIN</Text>
          </View>
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={[styles.enableButton, isLoading && styles.buttonDisabled]}
            onPress={handleEnableBiometric}
            disabled={isLoading}
          >
            <Text style={styles.enableButtonText}>
              {isLoading ? 'ƒêang thi·∫øt l·∫≠p...' : `B·∫≠t ${biometricInfo.typeName}`}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.skipButton}
            onPress={handleSkip}
            disabled={isLoading}
          >
            <Text style={styles.skipButtonText}>ƒê·ªÉ sau</Text>
          </TouchableOpacity>
        </View>

        <Text style={styles.note}>
          B·∫°n c√≥ th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t n√†y b·∫•t k·ª≥ l√∫c n√†o trong ph·∫ßn C√†i ƒë·∫∑t
        </Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  iconContainer: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 30,
  },
  icon: {
    fontSize: 48,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 12,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    lineHeight: 22,
    marginBottom: 40,
  },
  benefitsList: {
    alignSelf: 'stretch',
    marginBottom: 40,
  },
  benefitItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    paddingHorizontal: 20,
  },
  benefitIcon: {
    fontSize: 20,
    marginRight: 12,
  },
  benefitText: {
    fontSize: 16,
    color: '#333',
    flex: 1,
  },
  buttonContainer: {
    alignSelf: 'stretch',
    marginBottom: 20,
  },
  enableButton: {
    backgroundColor: '#007AFF',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginBottom: 12,
  },
  enableButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  skipButton: {
    backgroundColor: 'transparent',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
  },
  skipButtonText: {
    color: '#666',
    fontSize: 16,
    fontWeight: '500',
  },
  buttonDisabled: {
    backgroundColor: '#ccc',
  },
  note: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
    lineHeight: 18,
  },
  primaryButton: {
    backgroundColor: '#007AFF',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginBottom: 12,
  },
  primaryButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
